@page "/products/create"

@using Blazor.ViewModels.Products
@using MinimalApiArchitecture.Api

@inject Client Client
@inject NavigationManager NavManager

<h3>New Product</h3>
<hr />
<EditForm Model="@viewModel" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    

    <!-- Name -->
    <div class="mb-3 row">
        <label class="col-form-label col-md-2">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="viewModel.Name"></InputText>
        </div>
    </div>
    <!-- Description -->
    <div class="mb-3 row">
        <label class="col-form-label col-md-2">Description</label>
        <div class="col-md-4">
            <InputTextArea class="form-control" @bind-Value="viewModel.Description"></InputTextArea>
        </div>
    </div>
    <!-- Category -->
    <div class="mb-3  row">
        <label class="col-form-label col-md-2">Category</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="viewModel.CategoryId">
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            </InputSelect>
        </div>
    </div>
    <!-- Price -->
    <div class="mb-3 row">
        <label class="col-form-labeol col-md-2">Price</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="viewModel.Price"></InputNumber>
        </div>
    </div>
    <!-- Submit -->
    <div class="row">
        <div class="offset-2">
            <NavLink class="btn btn-light mr-1" href="javascript:history.back()">Back</NavLink>
            <button class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    CreateProductViewModel viewModel = new();
    List<GetCategoriesResponse> categories = new();
    bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        categories = (await Client.GetCategoriesAsync()).ToList();
        var defaultCategory = categories.FirstOrDefault();

        viewModel.CategoryId = defaultCategory?.CategoryId ?? 0;
    }

    public async Task Submit()
    {
        if(isBusy) 
        {
            return;
        }

        isBusy = true;

        await Client.CreateProductAsync(new CreateProductCommand
        {
            CategoryId = viewModel.CategoryId,
            Description = viewModel.Description,
            Name = viewModel.Name,
            Price = viewModel.Price
        });

        isBusy = false;

        NavManager.NavigateTo("/products");
    }
}
